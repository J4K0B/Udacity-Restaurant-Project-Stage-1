// property of https://github.com/jakearchibald/idb

"use strict";

(function() {
  function toArray(arr) {
    return Array.prototype.slice.call(arr);
  }

  function promisifyRequest(request) {
    return new Promise(function(resolve, reject) {
      request.onsuccess = function() {
        resolve(request.result);
      };

      request.onerror = function() {
        reject(request.error);
      };
    });
  }

  function promisifyRequestCall(obj, method, args) {
    var request;
    var p = new Promise(function(resolve, reject) {
      request = obj[method].apply(obj, args);
      promisifyRequest(request).then(resolve, reject);
    });

    p.request = request;
    return p;
  }

  function promisifyCursorRequestCall(obj, method, args) {
    var p = promisifyRequestCall(obj, method, args);
    return p.then(function(value) {
      if (!value) return;
      return new Cursor(value, p.request);
    });
  }

  function proxyProperties(ProxyClass, targetProp, properties) {
    properties.forEach(function(prop) {
      Object.defineProperty(ProxyClass.prototype, prop, {
        get: function() {
          return this[targetProp][prop];
        },
        set: function(val) {
          this[targetProp][prop] = val;
        }
      });
    });
  }

  function proxyRequestMethods(
    ProxyClass,
    targetProp,
    Constructor,
    properties
  ) {
    properties.forEach(function(prop) {
      if (!(prop in Constructor.prototype)) return;
      ProxyClass.prototype[prop] = function() {
        return promisifyRequestCall(this[targetProp], prop, arguments);
      };
    });
  }

  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {
    properties.forEach(function(prop) {
      if (!(prop in Constructor.prototype)) return;
      ProxyClass.prototype[prop] = function() {
        return this[targetProp][prop].apply(this[targetProp], arguments);
      };
    });
  }

  function proxyCursorRequestMethods(
    ProxyClass,
    targetProp,
    Constructor,
    properties
  ) {
    properties.forEach(function(prop) {
      if (!(prop in Constructor.prototype)) return;
      ProxyClass.prototype[prop] = function() {
        return promisifyCursorRequestCall(this[targetProp], prop, arguments);
      };
    });
  }

  function Index(index) {
    this._index = index;
  }

  proxyProperties(Index, "_index", ["name", "keyPath", "multiEntry", "unique"]);

  proxyRequestMethods(Index, "_index", IDBIndex, [
    "get",
    "getKey",
    "getAll",
    "getAllKeys",
    "count"
  ]);

  proxyCursorRequestMethods(Index, "_index", IDBIndex, [
    "openCursor",
    "openKeyCursor"
  ]);

  function Cursor(cursor, request) {
    this._cursor = cursor;
    this._request = request;
  }

  proxyProperties(Cursor, "_cursor", [
    "direction",
    "key",
    "primaryKey",
    "value"
  ]);

  proxyRequestMethods(Cursor, "_cursor", IDBCursor, ["update", "delete"]);

  // proxy 'next' methods
  ["advance", "continue", "continuePrimaryKey"].forEach(function(methodName) {
    if (!(methodName in IDBCursor.prototype)) return;
    Cursor.prototype[methodName] = function() {
      var cursor = this;
      var args = arguments;
      return Promise.resolve().then(function() {
        cursor._cursor[methodName].apply(cursor._cursor, args);
        return promisifyRequest(cursor._request).then(function(value) {
          if (!value) return;
          return new Cursor(value, cursor._request);
        });
      });
    };
  });

  function ObjectStore(store) {
    this._store = store;
  }

  ObjectStore.prototype.createIndex = function() {
    return new Index(this._store.createIndex.apply(this._store, arguments));
  };

  ObjectStore.prototype.index = function() {
    return new Index(this._store.index.apply(this._store, arguments));
  };

  proxyProperties(ObjectStore, "_store", [
    "name",
    "keyPath",
    "indexNames",
    "autoIncrement"
  ]);

  proxyRequestMethods(ObjectStore, "_store", IDBObjectStore, [
    "put",
    "add",
    "delete",
    "clear",
    "get",
    "getAll",
    "getKey",
    "getAllKeys",
    "count"
  ]);

  proxyCursorRequestMethods(ObjectStore, "_store", IDBObjectStore, [
    "openCursor",
    "openKeyCursor"
  ]);

  proxyMethods(ObjectStore, "_store", IDBObjectStore, ["deleteIndex"]);

  function Transaction(idbTransaction) {
    this._tx = idbTransaction;
    this.complete = new Promise(function(resolve, reject) {
      idbTransaction.oncomplete = function() {
        resolve();
      };
      idbTransaction.onerror = function() {
        reject(idbTransaction.error);
      };
      idbTransaction.onabort = function() {
        reject(idbTransaction.error);
      };
    });
  }

  Transaction.prototype.objectStore = function() {
    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));
  };

  proxyProperties(Transaction, "_tx", ["objectStoreNames", "mode"]);

  proxyMethods(Transaction, "_tx", IDBTransaction, ["abort"]);

  function UpgradeDB(db, oldVersion, transaction) {
    this._db = db;
    this.oldVersion = oldVersion;
    this.transaction = new Transaction(transaction);
  }

  UpgradeDB.prototype.createObjectStore = function() {
    return new ObjectStore(
      this._db.createObjectStore.apply(this._db, arguments)
    );
  };

  proxyProperties(UpgradeDB, "_db", ["name", "version", "objectStoreNames"]);

  proxyMethods(UpgradeDB, "_db", IDBDatabase, ["deleteObjectStore", "close"]);

  function DB(db) {
    this._db = db;
  }

  DB.prototype.transaction = function() {
    return new Transaction(this._db.transaction.apply(this._db, arguments));
  };

  proxyProperties(DB, "_db", ["name", "version", "objectStoreNames"]);

  proxyMethods(DB, "_db", IDBDatabase, ["close"]);

  // Add cursor iterators
  // TODO: remove this once browsers do the right thing with promises
  ["openCursor", "openKeyCursor"].forEach(function(funcName) {
    [ObjectStore, Index].forEach(function(Constructor) {
      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.
      if (!(funcName in Constructor.prototype)) return;

      Constructor.prototype[funcName.replace("open", "iterate")] = function() {
        var args = toArray(arguments);
        var callback = args[args.length - 1];
        var nativeObject = this._store || this._index;
        var request = nativeObject[funcName].apply(
          nativeObject,
          args.slice(0, -1)
        );
        request.onsuccess = function() {
          callback(request.result);
        };
      };
    });
  });

  // polyfill getAll
  [Index, ObjectStore].forEach(function(Constructor) {
    if (Constructor.prototype.getAll) return;
    Constructor.prototype.getAll = function(query, count) {
      var instance = this;
      var items = [];

      return new Promise(function(resolve) {
        instance.iterateCursor(query, function(cursor) {
          if (!cursor) {
            resolve(items);
            return;
          }
          items.push(cursor.value);

          if (count !== undefined && items.length == count) {
            resolve(items);
            return;
          }
          cursor.continue();
        });
      });
    };
  });

  var exp = {
    open: function(name, version, upgradeCallback) {
      var p = promisifyRequestCall(indexedDB, "open", [name, version]);
      var request = p.request;

      request.onupgradeneeded = function(event) {
        if (upgradeCallback) {
          upgradeCallback(
            new UpgradeDB(request.result, event.oldVersion, request.transaction)
          );
        }
      };

      return p.then(function(db) {
        return new DB(db);
      });
    },
    delete: function(name) {
      return promisifyRequestCall(indexedDB, "deleteDatabase", [name]);
    }
  };

  if (typeof module !== "undefined") {
    module.exports = exp;
    module.exports.default = module.exports;
  } else {
    self.idb = exp;
  }
})();

const restaurantPromise = idb.open("restaurants", 3, upgradeDb => {
  if (upgradeDb.oldVersion >= 3) return;
  const keyValStore = upgradeDb.createObjectStore("restaurants", {
    keyPath: "id"
  });
});
const reviewsPromise = idb.open("reviews", 3, upgradeDb => {
  if (upgradeDb.oldVersion >= 3) return;
  const keyValStore = upgradeDb.createObjectStore("reviews", {
    keyPath: "id"
  });
});
const offlinePromise = idb.open("offline", 3, upgradeDb => {
  if (upgradeDb.oldVersion >= 3) return;
  const keyValStore = upgradeDb.createObjectStore("offline");
});
const favoritePromise = idb.open("offline_favorite", 3, upgradeDb => {
  if (upgradeDb.oldVersion >= 3) return;
  const keyValStore = upgradeDb.createObjectStore("offline_favorite");
});
/**
 * Common database helper functions.
 */
class DBHelper {
  /**
   * Database URL.
   * Change this to restaurants.json file location on your server.
   */
  static get DATABASE_URL() {
    const port = 1337; // Change this to your server port
    return `http://127.0.0.1:${port}`;
  }

  /**
   * Fetch all restaurants.
   */
  static fetchRestaurants(callback) {
    restaurantPromise.then(db => {
      const index = db.transaction("restaurants").objectStore("restaurants");
      let served = false;
      index.getAll().then(restaurants => {
        if (restaurants) {
          callback(null, restaurants);
          served = true;
        }
        fetch(`${DBHelper.DATABASE_URL}/restaurants`)
          .then(json => json.json())
          .then(async restaurants2 => {
            if (!db) return;
            // await this.doOfflineRequests();

            const tx = db.transaction("restaurants", "readwrite");
            var store = tx.objectStore("restaurants");
            restaurants2.forEach(restaurant => store.put(restaurant));
            if (!served || restaurants.length < restaurants2.length)
              callback(null, restaurants2);
          })
          .catch(err => {
            if (!served) callback(err, null);
          });
      });
    });
  }

  /**
   * Fetch a restaurant by its ID.
   */
  static fetchRestaurantById(id, callback) {
    restaurantPromise.then(restaurantsDb => {
      reviewsPromise.then(reviewsDb => {
        // check if there are reviews for the restaurant
        const reviewsStore = reviewsDb
          .transaction("reviews")
          .objectStore("reviews");
        let reviewsAvailable = false;
        let restaurantReviews = null;
        reviewsStore.getAll().then(reviews => {
          if (reviews) {
            restaurantReviews = reviews.filter(r => r["restaurant_id"] == id);
            if (restaurantReviews.length > 0) {
              // there are cached reviews for the requested restaurant
              reviewsAvailable = true;
            }
          }

          const restaurantsStore = restaurantsDb
            .transaction("restaurants")
            .objectStore("restaurants");
          let served = false;
          let restaurantAvailable = false;
          let restaurant = null;
          // look for cached restaurant
          restaurantsStore.getAll().then(restaurants => {
            if (restaurants) {
              // there are cached restaurants ready to serve
              restaurant = restaurants.find(r => r.id == id);
              if (restaurant) restaurantAvailable = true;
              // both are available in cache
              if (restaurantAvailable && reviewsAvailable) {
                restaurant.reviews = restaurantReviews;
                callback(null, restaurant);
                served = true;
              }
            }
            let fetchedReviews = [];
            let fetchedRestaurant = null;

            // get new reviews for restaurant information
            fetch(`${DBHelper.DATABASE_URL}/reviews/?restaurant_id=${id}`)
              .then(json => json.json())
              .then(async reviews => {
                await this.doOfflineRequests();
                // callback when we have restaurant and didn't callback earlier
                if (!served && restaurantAvailable) {
                  restaurant.reviews = reviews;
                  served = true;
                  callback(null, restaurant);
                }
                // update cached reviews DB
                if (reviewsDb) {
                  const reviewsTx = reviewsDb.transaction(
                    "reviews",
                    "readwrite"
                  );
                  const reviewsStore2 = reviewsTx.objectStore("reviews");
                  reviews.forEach(review => reviewsStore2.put(review));
                }
                // get new restaurant information
                fetch(`${DBHelper.DATABASE_URL}/restaurants/${id}`)
                  .then(json => json.json())
                  .then(fetchedRestaurant => {
                    fetchedRestaurant.reviews = fetchedReviews;
                    // callback when not already done
                    if (!served) {
                      callback(null, fetchedRestaurant);
                    }
                    // update cached restaurants db
                    if (!restaurantsDb) return;
                    const restaurantTx = restaurantsDb.transaction(
                      "restaurants",
                      "readwrite"
                    );
                    const restaurantsStore2 = restaurantTx.objectStore(
                      "restaurants"
                    );
                    restaurantsStore2.put(restaurant2);
                  })
                  .catch(() => {
                    if (!served) callback("Restaurant does not exist", null);
                  });
              });
          });
        });
      });
    });
  }

  static async favoriteRestaurant(id, newState) {
    const url = `${
      this.DATABASE_URL
    }/restaurants/${id}/?is_favorite=${newState}`;
    try {
      const res = await fetch(url, {
        method: "PUT",
        headers: {
          accept: "application/json"
        }
      });
      const json = await res.json();
      // update local db
      this.doOfflineRequests();
      const restaurantsDb = await restaurantPromise;
      const tx = restaurantsDb.transaction("restaurants", "readwrite");
      const store = tx.objectStore("restaurants");
      store.put(json);
      return json;
    } catch (e) {
      // request failed -> update local db anyway and schedule the request for later
      const restaurantsDb = await restaurantPromise;
      const restaurantTx = restaurantsDb.transaction(
        "restaurants",
        "readwrite"
      );
      const restaurantStore = restaurantTx.objectStore("restaurants");
      const restaurants = await restaurantStore.getAll();
      // look for restaurant
      const restaurant = restaurants.find(r => r.id == id);
      restaurant["is_favorite"] = newState;
      restaurantStore.put(restaurant);
      // schedule request for later
      const offlineFavoriteDb = await favoritePromise;
      const offlineFavoriteTx = offlineFavoriteDb.transaction(
        "offline_favorite",
        "readwrite"
      );
      const offlineFavoriteStore = offlineFavoriteTx.objectStore(
        "offline_favorite"
      );
      offlineFavoriteStore.put(url, id);
      return restaurant;
    }
  }

  static async postReview(restaurantInfo) {
    try {
      const data = await this.reviewRequest(restaurantInfo);

      this.fireSyncEvent();
      const json = await data.json();
      const reviewsDb = await reviewsPromise;
      const tx = reviewsDb.transaction("reviews", "readwrite");
      const store = tx.objectStore("reviews");

      store.put(json);
      // const reviewsStore = reviewsDb
      //   .transaction("reviews")
      //   .objectStore("reviews");

      const allReviews = await store.getAll();
      const reviews = allReviews.filter(
        r => r["restaurant_id"] == restaurantInfo.restaurantId
      );
      return reviews;
    } catch (e) {
      const offlineDb = await offlinePromise;
      const offlineTx = offlineDb.transaction("offline", "readwrite");
      const offlineStore = offlineTx.objectStore("offline");

      offlineStore.put(
        restaurantInfo,
        `${restaurantInfo.restaurantId}${restaurantInfo.ratingNumber}`
      );
      const reviewsDb = await reviewsPromise;
      const tx = reviewsDb.transaction("reviews", "readwrite");
      const store = tx.objectStore("reviews");
      const allReviews = await store.getAll();
      const reviews = allReviews.filter(
        r => r["restaurant_id"] == restaurantInfo.restaurantId
      );
      restaurantInfo.rating = restaurantInfo.ratingNumber;
      reviews.push(restaurantInfo);
      return reviews;
    }
  }

  static reviewRequest({ restaurantId, ratingNumber, comments, name }) {
    return fetch(`${this.DATABASE_URL}/reviews/`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      body: JSON.stringify({
        restaurant_id: restaurantId,
        rating: ratingNumber,
        comments,
        name
      })
    });
  }

  static fireSyncEvent() {
    // google dev background sync
    if ("serviceWorker" in navigator && "SyncManager" in window) {
      navigator.serviceWorker.ready
        .then(function(reg) {
          return reg.sync.register("offline-requests");
        })
        .catch(() => {
          // system was unable to register for a sync,
          // this could be an OS-level restriction
          this.doOfflineRequests();
        });
    } else {
      // serviceworker/sync not supported
      this.doOfflineRequests();
    }
  }

  // does all offline requests if they are still there
  static async doOfflineRequests() {
    console.log("offlinerequest");
    const offlineDb = await offlinePromise;
    const tx = offlineDb.transaction("offline", "readwrite");
    const store = tx.objectStore("offline");
    const offlineReviews = await store.getAll();
    const offlineFavoriteDb = await favoritePromise;
    const offlineFavoriteTx = offlineFavoriteDb.transaction(
      "offline_favorite",
      "readwrite"
    );
    const offlineFavoriteStore = offlineFavoriteTx.objectStore(
      "offline_favorite"
    );
    const offlineFavorites = await offlineFavoriteStore.getAll();
    if (offlineReviews.length <= 0 && offlineFavorites <= 0) return;
    return Promise.all(
      offlineReviews.map(review => {
        return this.reviewRequest(review).then(async data => {
          const tx2 = offlineDb.transaction("offline", "readwrite");
          const store2 = tx2.objectStore("offline");
          await store2.clear();
          const json = await data.json();
          const reviewsDb = await reviewsPromise;
          const tx = reviewsDb.transaction("reviews", "readwrite");
          const store = tx.objectStore("reviews");
          store.put(json);
          return;
        });
      }),
      offlineFavorites.map(async url => {
        const res = await fetch(url, {
          method: "PUT",
          headers: {
            accept: "application/json"
          }
        });
        const json = await res.json();
        const offlineFavoriteTx = offlineFavoriteDb.transaction(
          "offline_favorite",
          "readwrite"
        );
        const offlineFavoriteStore = offlineFavoriteTx.objectStore(
          "offline_favorite"
        );
        await offlineFavoriteStore.clear();
        // update local db
        const restaurantsDb = await restaurantPromise;
        const restaurantsTx = restaurantsDb.transaction(
          "restaurants",
          "readwrite"
        );
        const restaurantsStore = restaurantsTx.objectStore("restaurants");
        restaurantsStore.put(json);
        return;
      })
    );
  }

  /**
   * Fetch restaurants by a cuisine type with proper error handling.
   */
  static fetchRestaurantByCuisine(cuisine, callback) {
    // Fetch all restaurants  with proper error handling
    DBHelper.fetchRestaurants((error, restaurants) => {
      if (error) {
        callback(error, null);
      } else {
        // Filter restaurants to have only given cuisine type
        const results = restaurants.filter(r => r.cuisine_type == cuisine);
        callback(null, results);
      }
    });
  }

  /**
   * Fetch restaurants by a neighborhood with proper error handling.
   */
  static fetchRestaurantByNeighborhood(neighborhood, callback) {
    // Fetch all restaurants
    DBHelper.fetchRestaurants((error, restaurants) => {
      if (error) {
        callback(error, null);
      } else {
        // Filter restaurants to have only given neighborhood
        const results = restaurants.filter(r => r.neighborhood == neighborhood);
        callback(null, results);
      }
    });
  }

  /**
   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.
   */
  static fetchRestaurantByCuisineAndNeighborhood(
    cuisine,
    neighborhood,
    callback
  ) {
    // Fetch all restaurants
    DBHelper.fetchRestaurants((error, restaurants) => {
      if (error) {
        callback(error, null);
      } else {
        let results = restaurants;
        if (cuisine != "all") {
          // filter by cuisine
          results = results.filter(r => r.cuisine_type == cuisine);
        }
        if (neighborhood != "all") {
          // filter by neighborhood
          results = results.filter(r => r.neighborhood == neighborhood);
        }
        callback(null, results);
      }
    });
  }

  /**
   * Fetch all neighborhoods with proper error handling.
   */
  static fetchNeighborhoods(callback) {
    // Fetch all restaurants
    DBHelper.fetchRestaurants((error, restaurants) => {
      if (error) {
        callback(error, null);
      } else {
        // Get all neighborhoods from all restaurants
        const neighborhoods = restaurants.map(
          (v, i) => restaurants[i].neighborhood
        );
        // Remove duplicates from neighborhoods
        const uniqueNeighborhoods = neighborhoods.filter(
          (v, i) => neighborhoods.indexOf(v) == i
        );
        callback(null, uniqueNeighborhoods);
      }
    });
  }

  /**
   * Fetch all cuisines with proper error handling.
   */
  static fetchCuisines(callback) {
    // Fetch all restaurants
    DBHelper.fetchRestaurants((error, restaurants) => {
      if (error) {
        callback(error, null);
      } else {
        // Get all cuisines from all restaurants
        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);
        // Remove duplicates from cuisines
        const uniqueCuisines = cuisines.filter(
          (v, i) => cuisines.indexOf(v) == i
        );
        callback(null, uniqueCuisines);
      }
    });
  }

  /**
   * Restaurant page URL.
   */
  static urlForRestaurant(restaurant) {
    return `./restaurant.html?id=${restaurant.id}`;
  }

  /**
   * Restaurant image URL.
   */
  static imageUrlForRestaurant(restaurant) {
    if (restaurant.photograph) {
      return `/img/${restaurant.photograph}.jpg`;
    }
    // fix for missing photograph property, using image 10 as fallback image
    return "/img/10.jpg";
  }

  /**
   * Map marker for a restaurant.
   */
  static mapMarkerForRestaurant(restaurant, map) {
    const marker = new google.maps.Marker({
      position: restaurant.latlng,
      title: restaurant.name,
      url: DBHelper.urlForRestaurant(restaurant),
      map: map,
      animation: google.maps.Animation.DROP
    });
    return marker;
  }
}
